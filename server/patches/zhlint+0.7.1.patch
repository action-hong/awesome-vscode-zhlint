diff --git a/node_modules/zhlint/dist/zhlint.d.ts b/node_modules/zhlint/dist/zhlint.d.ts
index 5eaf0a0..07eed6a 100644
--- a/node_modules/zhlint/dist/zhlint.d.ts
+++ b/node_modules/zhlint/dist/zhlint.d.ts
@@ -277,6 +277,7 @@ export declare type Result = {
     disabled?: boolean
     origin: string
     result: string
+		diff: Array<{ ruleName: string, value: string, changed: boolean }>
     validations: Validation[]
 }
 
diff --git a/node_modules/zhlint/lib/rules/case-abbrs.js b/node_modules/zhlint/lib/rules/case-abbrs.js
index a7dfc6f..cd1cddc 100644
--- a/node_modules/zhlint/lib/rules/case-abbrs.js
+++ b/node_modules/zhlint/lib/rules/case-abbrs.js
@@ -59,7 +59,7 @@ const matchAbbr = (token, group, reversedAbbrChars) => {
 };
 const generateHandler = (options) => {
     const reversedAbbrChars = reverseAbbrsIntoChars(options.skipAbbrs || []);
-    return (token, index, group) => {
+    const handleCaseAbbrs = (token, index, group) => {
         // skip non-dot tokens
         if (token.content !== '.') {
             return;
@@ -78,6 +78,8 @@ const generateHandler = (options) => {
             (0, util_1.removeValidationOnTarget)(token, report_1.ValidationTarget.CONTENT);
         }
     };
+
+		return handleCaseAbbrs;
 };
 exports.defaultConfig = {
     skipAbbrs: defaultSkippedAbbrs
diff --git a/node_modules/zhlint/lib/rules/case-html-entity.js b/node_modules/zhlint/lib/rules/case-html-entity.js
index 6b49fc1..1281391 100644
--- a/node_modules/zhlint/lib/rules/case-html-entity.js
+++ b/node_modules/zhlint/lib/rules/case-html-entity.js
@@ -14,7 +14,7 @@ const report_1 = require("../report");
 const util_1 = require("./util");
 const generateHandler = (options) => {
     options;
-    return (token, _, group) => {
+    const handleCaseHTMLEntiry = (token, _, group) => {
         // skip non-& tokens
         if (token.content !== '&') {
             return;
@@ -57,6 +57,7 @@ const generateHandler = (options) => {
             }
         }
     };
+		return handleCaseHTMLEntiry;
 };
 exports.defaultConfig = {};
 exports.default = generateHandler;
diff --git a/node_modules/zhlint/lib/rules/case-linebreak.js b/node_modules/zhlint/lib/rules/case-linebreak.js
index 395a4e9..559e5c9 100644
--- a/node_modules/zhlint/lib/rules/case-linebreak.js
+++ b/node_modules/zhlint/lib/rules/case-linebreak.js
@@ -14,12 +14,13 @@ const util_1 = require("./util");
 const generateHandler = (options) => {
     // do nothing
     options;
-    return (token) => {
+    const handleCaseLineBreak = (token) => {
         if (token.spaceAfter && token.spaceAfter.match(/\n/)) {
             (0, util_1.removeValidationOnTarget)(token, report_1.ValidationTarget.SPACE_AFTER);
             token.modifiedSpaceAfter = token.spaceAfter;
         }
     };
+		return handleCaseLineBreak;
 };
 exports.defaultConfig = {};
 exports.default = generateHandler;
diff --git a/node_modules/zhlint/lib/rules/case-zh-units.js b/node_modules/zhlint/lib/rules/case-zh-units.js
index 2dd5f30..589233c 100644
--- a/node_modules/zhlint/lib/rules/case-zh-units.js
+++ b/node_modules/zhlint/lib/rules/case-zh-units.js
@@ -18,7 +18,7 @@ const generateHandler = (options) => {
         .filter((x) => (0, parser_1.checkCharType)(x) === parser_1.CharType.LETTERS_FULL)
         .join('');
     const unitMatcher = new RegExp(`^[${matcherStr}]`);
-    return (token, _, group) => {
+    const handleZhUnits = (token, _, group) => {
         // make sure the content is a number
         if (token.type === parser_1.CharType.LETTERS_HALF && token.content.match(/^\d+$/)) {
             // make sure the content after is a Chinese unit
@@ -53,6 +53,7 @@ const generateHandler = (options) => {
             }
         }
     };
+		return handleZhUnits;
 };
 exports.defaultConfig = {
     skipZhUnits: defaultSkippedZhUnits
diff --git a/node_modules/zhlint/lib/rules/hyper-mark.js b/node_modules/zhlint/lib/rules/hyper-mark.js
index 593fa2d..61d1378 100644
--- a/node_modules/zhlint/lib/rules/hyper-mark.js
+++ b/node_modules/zhlint/lib/rules/hyper-mark.js
@@ -29,7 +29,7 @@ const messages_1 = require('./messages')
 const generateHandler = (options) => {
   const noSpaceInsideMarkOption =
     options === null || options === void 0 ? void 0 : options.noSpaceInsideMark
-  return (token, _, group) => {
+  const handleMark = (token, _, group) => {
     // skip if there is no options
     if (!noSpaceInsideMarkOption) {
       return
@@ -77,6 +77,7 @@ const generateHandler = (options) => {
       )
     }
   }
+	return handleMark;
 }
 exports.defaultConfig = {
   noSpaceInsideMark: true
diff --git a/node_modules/zhlint/lib/rules/space-bracket.js b/node_modules/zhlint/lib/rules/space-bracket.js
index 845db75..d36b6c3 100644
--- a/node_modules/zhlint/lib/rules/space-bracket.js
+++ b/node_modules/zhlint/lib/rules/space-bracket.js
@@ -61,7 +61,7 @@ const generateHandler = (options) => {
     const spaceOutsideHalfBracketOption = options.spaceOutsideHalfBracket;
     const noSpaceOutsideFullBracketOption = options.noSpaceOutsideFullBracket;
     const adjustedFullWidthOption = options.adjustedFullWidthPunctuation || '';
-    return (token, _, group) => {
+    const handleSpaceBracket = (token, _, group) => {
         // skip non-bracket tokens
         if (token.type !== parser_1.HyperTokenType.HYPER_WRAPPER_BRACKET) {
             return;
@@ -185,6 +185,7 @@ const generateHandler = (options) => {
             }
         }
     };
+		return handleSpaceBracket;
 };
 exports.defaultConfig = {
     spaceOutsideHalfBracket: true,
diff --git a/node_modules/zhlint/lib/rules/space-content.js b/node_modules/zhlint/lib/rules/space-content.js
index 5239d18..3b848ed 100644
--- a/node_modules/zhlint/lib/rules/space-content.js
+++ b/node_modules/zhlint/lib/rules/space-content.js
@@ -47,7 +47,7 @@ const generateHandler = (options) => {
     options === null || options === void 0
       ? void 0
       : options.spaceBetweenMixedWidthContent
-  return (token, _, group) => {
+  const handleSpaceContent = (token, _, group) => {
     // skip non-content tokens
     if (!(0, parser_1.isContentType)(token.type)) {
       return
@@ -112,6 +112,7 @@ const generateHandler = (options) => {
       ;(0, util_1.checkSpaceAfter)(spaceHost, spaceAfter, message)
     }
   }
+	return handleSpaceContent;
 }
 exports.defaultConfig = {
   spaceBetweenHalfWidthContent: true,
diff --git a/node_modules/zhlint/lib/rules/space-letters.js b/node_modules/zhlint/lib/rules/space-letters.js
index 4085ce6..2855948 100644
--- a/node_modules/zhlint/lib/rules/space-letters.js
+++ b/node_modules/zhlint/lib/rules/space-letters.js
@@ -38,7 +38,7 @@ const generateHandler = (options) => {
     const onlyOneBetweenHalfWidthContentOption = options === null || options === void 0 ? void 0 : options.spaceBetweenHalfWidthLetters;
     const noBetweenFullWidthContentOption = options === null || options === void 0 ? void 0 : options.noSpaceBetweenFullWidthLetters;
     const betweenMixedWidthContentOption = options === null || options === void 0 ? void 0 : options.spaceBetweenMixedWidthLetters;
-    return (token, _, group) => {
+    const handleSpaceLetters = (token, _, group) => {
         // skip non-content tokens
         if (!(0, parser_1.isLettersType)(token.type)) {
             return;
@@ -91,6 +91,7 @@ const generateHandler = (options) => {
             (0, util_1.checkSpaceAfter)(spaceHost, spaceAfter, message);
         }
     };
+		return handleSpaceLetters;
 };
 exports.defaultConfig = {
     spaceBetweenHalfWidthContent: true,
diff --git a/node_modules/zhlint/lib/rules/space-linebreak.js b/node_modules/zhlint/lib/rules/space-linebreak.js
index d73a3fe..5190a30 100644
--- a/node_modules/zhlint/lib/rules/space-linebreak.js
+++ b/node_modules/zhlint/lib/rules/space-linebreak.js
@@ -14,7 +14,7 @@ const util_1 = require('./util')
 const generateHandler = (options) => {
   // do nothing
   options
-  return (token) => {
+  const handleSpaceLineBreak = (token) => {
     if (token.spaceAfter && token.spaceAfter.match(/\n/)) {
       ;(0, util_1.removeValidation)(
         token,
@@ -24,6 +24,7 @@ const generateHandler = (options) => {
       token.modifiedSpaceAfter = token.spaceAfter
     }
   }
+	return handleSpaceLineBreak;
 }
 exports.defaultConfig = {}
 exports.default = generateHandler
diff --git a/node_modules/zhlint/lib/rules/space-punctuation.js b/node_modules/zhlint/lib/rules/space-punctuation.js
index 05240e4..295743d 100644
--- a/node_modules/zhlint/lib/rules/space-punctuation.js
+++ b/node_modules/zhlint/lib/rules/space-punctuation.js
@@ -39,7 +39,7 @@ const generateHandler = (options) => {
     const noBeforePunctuationOption = options === null || options === void 0 ? void 0 : options.noSpaceBeforePunctuation;
     const oneAfterHalfWidthPunctuationOption = options === null || options === void 0 ? void 0 : options.spaceAfterHalfWidthPunctuation;
     const noAfterFullWidthPunctuationOption = options === null || options === void 0 ? void 0 : options.noSpaceAfterFullWidthPunctuation;
-    return (token, _, group) => {
+    const handleSpacePunctuation = (token, _, group) => {
         // skip non-punctuation tokens and non-normal punctuations
         if (!(0, parser_1.isPunctuationType)(token.type)) {
             return;
@@ -101,6 +101,7 @@ const generateHandler = (options) => {
             }
         }
     };
+		return handleSpacePunctuation;
 };
 exports.defaultConfig = {
     noSpaceBeforePunctuation: true,
diff --git a/node_modules/zhlint/lib/rules/space-quote.js b/node_modules/zhlint/lib/rules/space-quote.js
index e930fb0..115ab3b 100644
--- a/node_modules/zhlint/lib/rules/space-quote.js
+++ b/node_modules/zhlint/lib/rules/space-quote.js
@@ -36,7 +36,7 @@ const generateHandler = (options) => {
     const spaceOutsideHalfQuoteOption = options.spaceOutsideHalfQuote;
     const noSpaceOutsideFullQuoteOption = options.noSpaceOutsideFullQuote;
     const adjustedFullWidthOption = options.adjustedFullWidthPunctuation || '';
-    return (token, _, group) => {
+    const handleSpaceQuote = (token, _, group) => {
         // skip non-group tokens
         if (token.type !== parser_1.GroupTokenType.GROUP) {
             return;
@@ -141,6 +141,7 @@ const generateHandler = (options) => {
             }
         }
     };
+		return handleSpaceQuote;
 };
 exports.defaultConfig = {
     spaceOutsideHalfQuote: true,
diff --git a/node_modules/zhlint/lib/rules/space-trim.js b/node_modules/zhlint/lib/rules/space-trim.js
index f4d1c29..259ac60 100644
--- a/node_modules/zhlint/lib/rules/space-trim.js
+++ b/node_modules/zhlint/lib/rules/space-trim.js
@@ -13,7 +13,7 @@ const messages_1 = require("./messages");
 const util_1 = require("./util");
 const generateHandler = (options) => {
     const trimSpaceOption = options === null || options === void 0 ? void 0 : options.trimSpace;
-    return (token, index, group) => {
+    const handleSpaceTrim = (token, index, group) => {
         if (!trimSpaceOption) {
             return;
         }
@@ -45,6 +45,7 @@ const generateHandler = (options) => {
             }
         }
     };
+		return handleSpaceTrim;
 };
 exports.defaultConfig = {
     trimSpace: true
diff --git a/node_modules/zhlint/lib/rules/space-wrapper.js b/node_modules/zhlint/lib/rules/space-wrapper.js
index e96877c..e313601 100644
--- a/node_modules/zhlint/lib/rules/space-wrapper.js
+++ b/node_modules/zhlint/lib/rules/space-wrapper.js
@@ -28,7 +28,7 @@ const parser_1 = require("../parser");
 const messages_1 = require("./messages");
 const generateHandler = (options) => {
     const noSpaceInsideMarkOption = options === null || options === void 0 ? void 0 : options.noSpaceInsideWrapper;
-    return (token, _, group) => {
+    const handleSpaceWrapper = (token, _, group) => {
         // skip if there is no options
         if (!noSpaceInsideMarkOption) {
             return;
@@ -57,6 +57,7 @@ const generateHandler = (options) => {
             (0, util_1.checkSpaceAfter)(token, '', messages_1.MARKDOWN_NOSPACE_INSIDE);
         }
     };
+		return handleSpaceWrapper;
 };
 exports.defaultConfig = {
     noSpaceInsideMark: true
diff --git a/node_modules/zhlint/lib/run.js b/node_modules/zhlint/lib/run.js
index bce6286..acb3d89 100644
--- a/node_modules/zhlint/lib/run.js
+++ b/node_modules/zhlint/lib/run.js
@@ -63,14 +63,26 @@ const lint = (str, normalizedOptions) => {
         const result = (0, parser_1.toMutableResult)((0, parser_1.parse)(value, marks), rules);
         parserErrors.push(...result.errors);
         const ignoredMarks = (0, ignore_1.default)(value, status.ignoredByRules, logger);
+				const debugDiff = []
         ruleHandlers.forEach((rule) => {
+						const now = Date.now();
             (0, parser_1.travel)(result.tokens, rule);
-            if (globalThis.__DEV__) {
+						const cost = Date.now() - now;
+						console.log(`[use time by ${rule.name}]`, cost)
+            if (globalThis.__DEV__ || globalThis.__DIFF__) {
                 const currentValue = (0, join_1.default)(result.tokens, start, ignoredMarks, []);
+								let changed = false;
                 if (lastValue !== currentValue) {
                     logger.log(`[After process by ${rule.name}]`);
                     logger.log(currentValue);
+										changed = true
                 }
+								debugDiff.push({
+									ruleName: rule.name,
+									value: currentValue,
+									cost,
+									changed
+								})
                 lastValue = currentValue;
             }
         });
@@ -82,12 +94,42 @@ const lint = (str, normalizedOptions) => {
         return {
             start,
             end,
+						debugDiff,
             value: lastValue
         };
     });
     return {
         origin: str,
         result: (0, replace_block_1.default)(str, modifiedBlocks),
+				diff: modifiedBlocks[0].debugDiff.map((_, ruleIndex) => {
+					// ruleIndex 表示第几个 rule
+					const blocks = modifiedBlocks.map((block) => {
+						return {
+							start: block.start,
+							end: block.end,
+							value: block.debugDiff[ruleIndex].value,
+							changed: block.debugDiff[ruleIndex].changed
+						}
+					})
+					const cost = modifiedBlocks.map((block) => block.debugDiff[ruleIndex].cost).reduce((a, b) => a + b, 0);
+					return {
+						blocks,
+						cost,
+						ruleName: modifiedBlocks[0].debugDiff[ruleIndex].ruleName,
+					}
+				}).map((ruleDiff) => {
+					return {
+						cost: ruleDiff.cost,
+						ruleName: ruleDiff.ruleName,
+						changed: !!ruleDiff.blocks.find((block) => block.changed),
+						value: (0, replace_block_1.default)(str, ruleDiff.blocks),
+					}
+				}).map((ruleDiff, index, arr) => {
+					return {
+						...ruleDiff,
+						lastValue: index === 0 ? str : arr[index - 1].value
+					}
+				}),
         validations: [...parserErrors, ...ruleErrors]
     };
 };
